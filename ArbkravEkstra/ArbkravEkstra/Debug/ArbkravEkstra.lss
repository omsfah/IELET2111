
ArbkravEkstra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00804000  0000033a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080404e  0080404e  0000041c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004605  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031ab  00000000  00000000  00004b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071f  00000000  00000000  00007cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  000083dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021e8  00000000  00000000  00008500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cd  00000000  00000000  0000a6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000a9b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_45>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	ea e3       	ldi	r30, 0x3A	; 58
 108:	f3 e0       	ldi	r31, 0x03	; 3
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ae 34       	cpi	r26, 0x4E	; 78
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	ae e4       	ldi	r26, 0x4E	; 78
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a9 35       	cpi	r26, 0x59	; 89
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 00 01 	call	0x200	; 0x200 <main>
 12e:	0c 94 9b 01 	jmp	0x336	; 0x336 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <__vector_45>:
		;
	}
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
	return ADC0.RES;
}
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	0b b6       	in	r0, 0x3b	; 59
 142:	0f 92       	push	r0
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	97 e2       	ldi	r25, 0x27	; 39
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <__vector_45+0x2a>
 164:	00 c0       	rjmp	.+0      	; 0x166 <__vector_45+0x30>
 166:	00 00       	nop
 168:	90 91 00 40 	lds	r25, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	89 27       	eor	r24, r25
 170:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 174:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 178:	88 23       	and	r24, r24
 17a:	29 f0       	breq	.+10     	; 0x186 <__vector_45+0x50>
 17c:	8f e0       	ldi	r24, 0x0F	; 15
 17e:	90 e4       	ldi	r25, 0x40	; 64
 180:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <puts>
 184:	04 c0       	rjmp	.+8      	; 0x18e <__vector_45+0x58>
 186:	88 e2       	ldi	r24, 0x28	; 40
 188:	90 e4       	ldi	r25, 0x40	; 64
 18a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <puts>
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7e0429>
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0b be       	out	0x3b, r0	; 59
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <TCA0_init>:
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
 1c0:	e0 e0       	ldi	r30, 0x00	; 0
 1c2:	fa e0       	ldi	r31, 0x0A	; 10
 1c4:	83 83       	std	Z+3, r24	; 0x03
 1c6:	81 e1       	ldi	r24, 0x11	; 17
 1c8:	81 83       	std	Z+1, r24	; 0x01
 1ca:	80 ed       	ldi	r24, 0xD0	; 208
 1cc:	87 a3       	std	Z+39, r24	; 0x27
 1ce:	85 e0       	ldi	r24, 0x05	; 5
 1d0:	80 83       	st	Z, r24
 1d2:	08 95       	ret

000001d4 <ADC0_init>:
 1d4:	e0 e6       	ldi	r30, 0x60	; 96
 1d6:	f4 e0       	ldi	r31, 0x04	; 4
 1d8:	86 89       	ldd	r24, Z+22	; 0x16
 1da:	88 7f       	andi	r24, 0xF8	; 248
 1dc:	86 8b       	std	Z+22, r24	; 0x16
 1de:	86 89       	ldd	r24, Z+22	; 0x16
 1e0:	84 60       	ori	r24, 0x04	; 4
 1e2:	86 8b       	std	Z+22, r24	; 0x16
 1e4:	86 89       	ldd	r24, Z+22	; 0x16
 1e6:	87 7f       	andi	r24, 0xF7	; 247
 1e8:	86 8b       	std	Z+22, r24	; 0x16
 1ea:	e0 e0       	ldi	r30, 0x00	; 0
 1ec:	f6 e0       	ldi	r31, 0x06	; 6
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	82 83       	std	Z+2, r24	; 0x02
 1f2:	85 e0       	ldi	r24, 0x05	; 5
 1f4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 1f8:	80 83       	st	Z, r24
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	80 87       	std	Z+8, r24	; 0x08
 1fe:	08 95       	ret

00000200 <main>:

int main(void)
{
	//PORTB.DIR |= PIN0_bm;
	PORTB.DIR |= PIN3_bm;
 200:	e0 e2       	ldi	r30, 0x20	; 32
 202:	f4 e0       	ldi	r31, 0x04	; 4
 204:	80 81       	ld	r24, Z
 206:	88 60       	ori	r24, 0x08	; 8
 208:	80 83       	st	Z, r24
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;
 20a:	8b e0       	ldi	r24, 0x0B	; 11
 20c:	82 8b       	std	Z+18, r24	; 0x12
    sei();
 20e:	78 94       	sei
    USART3_init();
 210:	0e 94 4c 01 	call	0x298	; 0x298 <USART3_init>
	TCA0_init();
 214:	0e 94 dd 00 	call	0x1ba	; 0x1ba <TCA0_init>
	ADC0_init();
 218:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <ADC0_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	8f e0       	ldi	r24, 0x0F	; 15
 21e:	97 e2       	ldi	r25, 0x27	; 39
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0x20>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x26>
 226:	00 00       	nop
    _delay_ms(10);
	stdout = &USART_stream;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e4       	ldi	r25, 0x40	; 64
 22c:	80 93 55 40 	sts	0x4055, r24	; 0x804055 <__iob+0x2>
 230:	90 93 56 40 	sts	0x4056, r25	; 0x804056 <__iob+0x3>
	printf("Heiheihei\r\n");
 234:	83 e4       	ldi	r24, 0x43	; 67
 236:	90 e4       	ldi	r25, 0x40	; 64
 238:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <puts>
    while (1) 
    {
		if (state)
 23c:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 240:	88 23       	and	r24, r24
 242:	a9 f0       	breq	.+42     	; 0x26e <main+0x6e>
		{
			TCA0.SPLIT.HCMP0=dutyCycle; 
 244:	80 91 4e 40 	lds	r24, 0x404E	; 0x80404e <__data_end>
 248:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
 24c:	87 e8       	ldi	r24, 0x87	; 135
 24e:	93 e1       	ldi	r25, 0x13	; 19
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x50>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x56>
 256:	00 00       	nop
			_delay_ms(5);
			dutyCycle = adcVal/4;
 258:	80 91 51 40 	lds	r24, 0x4051	; 0x804051 <adcVal>
 25c:	90 91 52 40 	lds	r25, 0x4052	; 0x804052 <adcVal+0x1>
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	80 93 4e 40 	sts	0x404E, r24	; 0x80404e <__data_end>
 26c:	e7 cf       	rjmp	.-50     	; 0x23c <main+0x3c>
		} 
		else
		{
			
			TCA0.SPLIT.LCMP0=servoVal; //For some reason theres interference between ports
 26e:	80 91 4f 40 	lds	r24, 0x404F	; 0x80404f <servoVal>
 272:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
 276:	87 e8       	ldi	r24, 0x87	; 135
 278:	93 e1       	ldi	r25, 0x13	; 19
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x7a>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x80>
 280:	00 00       	nop
			_delay_ms(5);
			servoVal=adcVal+750;		
 282:	80 91 51 40 	lds	r24, 0x4051	; 0x804051 <adcVal>
 286:	90 91 52 40 	lds	r25, 0x4052	; 0x804052 <adcVal+0x1>
 28a:	82 51       	subi	r24, 0x12	; 18
 28c:	9d 4f       	sbci	r25, 0xFD	; 253
 28e:	80 93 4f 40 	sts	0x404F, r24	; 0x80404f <servoVal>
 292:	90 93 50 40 	sts	0x4050, r25	; 0x804050 <servoVal+0x1>
 296:	d2 cf       	rjmp	.-92     	; 0x23c <main+0x3c>

00000298 <USART3_init>:
 */ 

#include "omsfah_usart.h"
void USART3_init(void) 
{
	PORTB.DIR &= ~PIN1_bm;
 298:	e0 e2       	ldi	r30, 0x20	; 32
 29a:	f4 e0       	ldi	r31, 0x04	; 4
 29c:	80 81       	ld	r24, Z
 29e:	8d 7f       	andi	r24, 0xFD	; 253
 2a0:	80 83       	st	Z, r24
	PORTB.DIR |= PIN0_bm;
 2a2:	80 81       	ld	r24, Z
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	80 83       	st	Z, r24
	USART3_BAUD = (uint16_t)USART3_BAUD_RATE(9600);
 2a8:	83 e8       	ldi	r24, 0x83	; 131
 2aa:	96 e0       	ldi	r25, 0x06	; 6
 2ac:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
 2b0:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	USART3.CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
 2b4:	e0 e6       	ldi	r30, 0x60	; 96
 2b6:	f8 e0       	ldi	r31, 0x08	; 8
 2b8:	86 81       	ldd	r24, Z+6	; 0x06
 2ba:	80 6c       	ori	r24, 0xC0	; 192
 2bc:	86 83       	std	Z+6, r24	; 0x06
 2be:	08 95       	ret

000002c0 <USART3_sendChar>:
}
void USART3_sendChar(char c)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
 2c0:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 2c4:	95 ff       	sbrs	r25, 5
 2c6:	fc cf       	rjmp	.-8      	; 0x2c0 <USART3_sendChar>
	{
		;
	}
	USART3.TXDATAL = c;
 2c8:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 2cc:	08 95       	ret

000002ce <USART3_printChar>:
	}
	return USART3.RXDATAL;
}
uint8_t USART3_printChar(char c, FILE* stream)
{
	USART3_sendChar(c);
 2ce:	0e 94 60 01 	call	0x2c0	; 0x2c0 <USART3_sendChar>
	return 0;
}
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	08 95       	ret

000002d6 <puts>:
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	e0 91 55 40 	lds	r30, 0x4055	; 0x804055 <__iob+0x2>
 2e2:	f0 91 56 40 	lds	r31, 0x4056	; 0x804056 <__iob+0x3>
 2e6:	23 81       	ldd	r18, Z+3	; 0x03
 2e8:	21 ff       	sbrs	r18, 1
 2ea:	1b c0       	rjmp	.+54     	; 0x322 <puts+0x4c>
 2ec:	8c 01       	movw	r16, r24
 2ee:	d0 e0       	ldi	r29, 0x00	; 0
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	f8 01       	movw	r30, r16
 2f4:	81 91       	ld	r24, Z+
 2f6:	8f 01       	movw	r16, r30
 2f8:	60 91 55 40 	lds	r22, 0x4055	; 0x804055 <__iob+0x2>
 2fc:	70 91 56 40 	lds	r23, 0x4056	; 0x804056 <__iob+0x3>
 300:	db 01       	movw	r26, r22
 302:	18 96       	adiw	r26, 0x08	; 8
 304:	ed 91       	ld	r30, X+
 306:	fc 91       	ld	r31, X
 308:	19 97       	sbiw	r26, 0x09	; 9
 30a:	88 23       	and	r24, r24
 30c:	31 f0       	breq	.+12     	; 0x31a <puts+0x44>
 30e:	09 95       	icall
 310:	89 2b       	or	r24, r25
 312:	79 f3       	breq	.-34     	; 0x2f2 <puts+0x1c>
 314:	df ef       	ldi	r29, 0xFF	; 255
 316:	cf ef       	ldi	r28, 0xFF	; 255
 318:	ec cf       	rjmp	.-40     	; 0x2f2 <puts+0x1c>
 31a:	8a e0       	ldi	r24, 0x0A	; 10
 31c:	09 95       	icall
 31e:	89 2b       	or	r24, r25
 320:	19 f0       	breq	.+6      	; 0x328 <puts+0x52>
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	9f ef       	ldi	r25, 0xFF	; 255
 326:	02 c0       	rjmp	.+4      	; 0x32c <puts+0x56>
 328:	8d 2f       	mov	r24, r29
 32a:	9c 2f       	mov	r25, r28
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
