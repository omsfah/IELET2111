
Arbeidskrav 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00804000  00000210  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00804014  00804014  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003746  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000309c  00000000  00000000  00003ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059a  00000000  00000000  00006b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00007104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018c2  00000000  00000000  000071a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000130  00000000  00000000  00008a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00008b92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e0 e1       	ldi	r30, 0x10	; 16
 108:	f2 e0       	ldi	r31, 0x02	; 2
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a4 31       	cpi	r26, 0x14	; 20
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	a4 e1       	ldi	r26, 0x14	; 20
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	aa 31       	cpi	r26, 0x1A	; 26
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 9b 00 	call	0x136	; 0x136 <main>
 12e:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{
	USART3_init();
 136:	0e 94 b7 00 	call	0x16e	; 0x16e <USART3_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	97 e2       	ldi	r25, 0x27	; 39
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x8>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0xe>
 144:	00 00       	nop
	_delay_ms(10);
	stdout = &USART_stream;
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e4       	ldi	r25, 0x40	; 64
 14a:	80 93 16 40 	sts	0x4016, r24	; 0x804016 <__data_end+0x2>
 14e:	90 93 17 40 	sts	0x4017, r25	; 0x804017 <__data_end+0x3>
    while (1) 
    {
	printf("test\r\n");
 152:	8e e0       	ldi	r24, 0x0E	; 14
 154:	90 e4       	ldi	r25, 0x40	; 64
 156:	0e 94 d6 00 	call	0x1ac	; 0x1ac <puts>
 15a:	9f e7       	ldi	r25, 0x7F	; 127
 15c:	28 e3       	ldi	r18, 0x38	; 56
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	91 50       	subi	r25, 0x01	; 1
 162:	20 40       	sbci	r18, 0x00	; 0
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x2a>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x34>
 16a:	00 00       	nop
 16c:	f2 cf       	rjmp	.-28     	; 0x152 <main+0x1c>

0000016e <USART3_init>:
 */ 

#include "omsfah_usart.h"
void USART3_init(void) 
{
	PORTB.DIR &= ~PIN1_bm;
 16e:	e0 e2       	ldi	r30, 0x20	; 32
 170:	f4 e0       	ldi	r31, 0x04	; 4
 172:	80 81       	ld	r24, Z
 174:	8d 7f       	andi	r24, 0xFD	; 253
 176:	80 83       	st	Z, r24
	PORTB.DIR |= PIN0_bm;
 178:	80 81       	ld	r24, Z
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 83       	st	Z, r24
	USART3_BAUD = (uint16_t)USART3_BAUD_RATE(9600);
 17e:	83 e8       	ldi	r24, 0x83	; 131
 180:	96 e0       	ldi	r25, 0x06	; 6
 182:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
 186:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	USART3.CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
 18a:	e0 e6       	ldi	r30, 0x60	; 96
 18c:	f8 e0       	ldi	r31, 0x08	; 8
 18e:	86 81       	ldd	r24, Z+6	; 0x06
 190:	80 6c       	ori	r24, 0xC0	; 192
 192:	86 83       	std	Z+6, r24	; 0x06
 194:	08 95       	ret

00000196 <USART3_sendChar>:
}
void USART3_sendChar(char c)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
 196:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 19a:	95 ff       	sbrs	r25, 5
 19c:	fc cf       	rjmp	.-8      	; 0x196 <USART3_sendChar>
	{
		;
	}
	USART3.TXDATAL = c;
 19e:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 1a2:	08 95       	ret

000001a4 <USART3_printChar>:
	}
	return USART3.RXDATAL;
}
uint8_t USART3_printChar(char c, FILE* stream)
{
	USART3_sendChar(c);
 1a4:	0e 94 cb 00 	call	0x196	; 0x196 <USART3_sendChar>
	return 0;
}
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	08 95       	ret

000001ac <puts>:
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	e0 91 16 40 	lds	r30, 0x4016	; 0x804016 <__data_end+0x2>
 1b8:	f0 91 17 40 	lds	r31, 0x4017	; 0x804017 <__data_end+0x3>
 1bc:	23 81       	ldd	r18, Z+3	; 0x03
 1be:	21 ff       	sbrs	r18, 1
 1c0:	1b c0       	rjmp	.+54     	; 0x1f8 <puts+0x4c>
 1c2:	8c 01       	movw	r16, r24
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
 1c8:	f8 01       	movw	r30, r16
 1ca:	81 91       	ld	r24, Z+
 1cc:	8f 01       	movw	r16, r30
 1ce:	60 91 16 40 	lds	r22, 0x4016	; 0x804016 <__data_end+0x2>
 1d2:	70 91 17 40 	lds	r23, 0x4017	; 0x804017 <__data_end+0x3>
 1d6:	db 01       	movw	r26, r22
 1d8:	18 96       	adiw	r26, 0x08	; 8
 1da:	ed 91       	ld	r30, X+
 1dc:	fc 91       	ld	r31, X
 1de:	19 97       	sbiw	r26, 0x09	; 9
 1e0:	88 23       	and	r24, r24
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <puts+0x44>
 1e4:	09 95       	icall
 1e6:	89 2b       	or	r24, r25
 1e8:	79 f3       	breq	.-34     	; 0x1c8 <puts+0x1c>
 1ea:	df ef       	ldi	r29, 0xFF	; 255
 1ec:	cf ef       	ldi	r28, 0xFF	; 255
 1ee:	ec cf       	rjmp	.-40     	; 0x1c8 <puts+0x1c>
 1f0:	8a e0       	ldi	r24, 0x0A	; 10
 1f2:	09 95       	icall
 1f4:	89 2b       	or	r24, r25
 1f6:	19 f0       	breq	.+6      	; 0x1fe <puts+0x52>
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	9f ef       	ldi	r25, 0xFF	; 255
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 1fe:	8d 2f       	mov	r24, r29
 200:	9c 2f       	mov	r25, r28
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
