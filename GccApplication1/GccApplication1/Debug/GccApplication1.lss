
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00804000  00000232  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003541  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f25  00000000  00000000  00003921  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052b  00000000  00000000  00006846  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00006d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000018b1  00000000  00000000  00006e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001aa  00000000  00000000  000086cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00008877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  8c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  90:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  94:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  98:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  9c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ac:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  bc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  cc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  dc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ec:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  f0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e2 e3       	ldi	r30, 0x32	; 50
 108:	f2 e0       	ldi	r31, 0x02	; 2
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a8 37       	cpi	r26, 0x78	; 120
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>
 11a:	0e 94 df 00 	call	0x1be	; 0x1be <main>
 11e:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <USART3_init>:
void LED_init(void);
void executeCommand(char *command);

void USART3_init(void)
{
	USART3.BAUD = (uint16_t)USART3_BAUD_RATE(9600); //Set baud rate til uart komm
 126:	e0 e6       	ldi	r30, 0x60	; 96
 128:	f8 e0       	ldi	r31, 0x08	; 8
 12a:	83 e8       	ldi	r24, 0x83	; 131
 12c:	96 e0       	ldi	r25, 0x06	; 6
 12e:	80 87       	std	Z+8, r24	; 0x08
 130:	91 87       	std	Z+9, r25	; 0x09

	USART3.CTRLB |= USART_RXEN_bm | USART_TXEN_bm; //Setter rx til inut og Tx til output
 132:	86 81       	ldd	r24, Z+6	; 0x06
 134:	80 6c       	ori	r24, 0xC0	; 192
 136:	86 83       	std	Z+6, r24	; 0x06
	
	PORTB.DIRSET = PIN0_bm; //Velger pins
 138:	e0 e2       	ldi	r30, 0x20	; 32
 13a:	f4 e0       	ldi	r31, 0x04	; 4
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	81 83       	std	Z+1, r24	; 0x01
	PORTB.DIRSET = PIN1_bm; //velger pins
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	81 83       	std	Z+1, r24	; 0x01
 144:	08 95       	ret

00000146 <USART3_sendChar>:

} 

void USART3_sendChar(char c)
{
	while (!(USART3.STATUS & USART_DREIF_bm)) //Sjekker at UART er paa og klar
 146:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 14a:	95 ff       	sbrs	r25, 5
 14c:	fc cf       	rjmp	.-8      	; 0x146 <USART3_sendChar>
	{
		;
	}
	USART3.TXDATAL = c; //Sender data
 14e:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 152:	08 95       	ret

00000154 <USART3_sendString>:
}

void USART3_sendString(char *str)
{
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	8c 01       	movw	r16, r24
	for(size_t i = 0; i < strlen(str); i++) //Converterer string til char for aa kunne sende det med uart
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	07 c0       	rjmp	.+14     	; 0x172 <USART3_sendString+0x1e>
	{
		USART3_sendChar(str[i]);
 164:	f8 01       	movw	r30, r16
 166:	ec 0f       	add	r30, r28
 168:	fd 1f       	adc	r31, r29
 16a:	80 81       	ld	r24, Z
 16c:	0e 94 a3 00 	call	0x146	; 0x146 <USART3_sendChar>
	USART3.TXDATAL = c; //Sender data
}

void USART3_sendString(char *str)
{
	for(size_t i = 0; i < strlen(str); i++) //Converterer string til char for aa kunne sende det med uart
 170:	21 96       	adiw	r28, 0x01	; 1
 172:	f8 01       	movw	r30, r16
 174:	01 90       	ld	r0, Z+
 176:	00 20       	and	r0, r0
 178:	e9 f7       	brne	.-6      	; 0x174 <USART3_sendString+0x20>
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	e0 1b       	sub	r30, r16
 17e:	f1 0b       	sbc	r31, r17
 180:	ce 17       	cp	r28, r30
 182:	df 07       	cpc	r29, r31
 184:	78 f3       	brcs	.-34     	; 0x164 <USART3_sendString+0x10>
	{
		USART3_sendChar(str[i]);
	}
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <USART3_readChar>:

char USART3_readChar(void)
{
	while (!(USART3.STATUS & USART_RXCIF_bm)) //Sjekker at UART er paa og klar
 190:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 194:	88 23       	and	r24, r24
 196:	e4 f7       	brge	.-8      	; 0x190 <USART3_readChar>
	{
		;
	}
	return USART3.RXDATAL;
 198:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
}
 19c:	08 95       	ret

0000019e <LED_init>:

void LED_init(void) //Slaar av led ved boot
{
	PORTE.DIRSET = PIN0_bm;
 19e:	e0 e8       	ldi	r30, 0x80	; 128
 1a0:	f4 e0       	ldi	r31, 0x04	; 4
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN1_bm;
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	81 83       	std	Z+1, r24	; 0x01
	PORTE.OUTSET = PIN0_bm & PIN1_bm;
 1aa:	15 82       	std	Z+5, r1	; 0x05
 1ac:	08 95       	ret

000001ae <executeCommand>:
	enum command {led_1_on, led_2_on, led_1_off, led_2_off};
	enum command ledstate;
	switch(ledstate)
	{
			case 0:
			PORTE.OUTSET=PIN0_bm;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7e0485>
			USART3_sendString("OK, LED 1 ON.\r\n");
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e4       	ldi	r25, 0x40	; 64
 1b8:	0e 94 aa 00 	call	0x154	; 0x154 <USART3_sendString>
 1bc:	08 95       	ret

000001be <main>:
	}
	
}

int main(void)
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
 1c6:	29 97       	sbiw	r28, 0x09	; 9
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	de bf       	out	0x3e, r29	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	8f e0       	ldi	r24, 0x0F	; 15
 1ce:	97 e2       	ldi	r25, 0x27	; 39
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x12>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x18>
 1d6:	00 00       	nop
	char c;
	
	/* This delay invalidates the initial noise on the TX line, after device reset. */
	_delay_ms(10);
	
	USART3_init();
 1d8:	0e 94 93 00 	call	0x126	; 0x126 <USART3_init>
	LED_init();
 1dc:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_init>
	
	USART3_sendString("Type ON/OFF to control the LED.\r\n");
 1e0:	85 e5       	ldi	r24, 0x55	; 85
 1e2:	90 e4       	ldi	r25, 0x40	; 64
 1e4:	0e 94 aa 00 	call	0x154	; 0x154 <USART3_sendString>
	}
	
}

int main(void)
{
 1e8:	10 e0       	ldi	r17, 0x00	; 0
	
	USART3_sendString("Type ON/OFF to control the LED.\r\n");
	
	while (1)
	{
		c = USART3_readChar();
 1ea:	0e 94 c8 00 	call	0x190	; 0x190 <USART3_readChar>
		if(c != '\n' && c != '\r')
 1ee:	8a 30       	cpi	r24, 0x0A	; 10
 1f0:	81 f0       	breq	.+32     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 1f2:	8d 30       	cpi	r24, 0x0D	; 13
 1f4:	71 f0       	breq	.+28     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
		{
			command[index++] = c;
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	91 0f       	add	r25, r17
 1fa:	e1 e0       	ldi	r30, 0x01	; 1
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ec 0f       	add	r30, r28
 200:	fd 1f       	adc	r31, r29
 202:	e1 0f       	add	r30, r17
 204:	f1 1d       	adc	r31, r1
 206:	80 83       	st	Z, r24
			if(index > MAX_COMMAND_LEN)
 208:	9a 30       	cpi	r25, 0x0A	; 10
 20a:	10 f4       	brcc	.+4      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
	while (1)
	{
		c = USART3_readChar();
		if(c != '\n' && c != '\r')
		{
			command[index++] = c;
 20c:	19 2f       	mov	r17, r25
 20e:	01 c0       	rjmp	.+2      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
			if(index > MAX_COMMAND_LEN)
			{
				index = 0;
 210:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		
		if(c == '\r')
 212:	8d 30       	cpi	r24, 0x0D	; 13
 214:	51 f7       	brne	.-44     	; 0x1ea <main+0x2c>
		{
			command[index] = '\0';
 216:	e1 e0       	ldi	r30, 0x01	; 1
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	ec 0f       	add	r30, r28
 21c:	fd 1f       	adc	r31, r29
 21e:	e1 0f       	add	r30, r17
 220:	f1 1d       	adc	r31, r1
 222:	10 82       	st	Z, r1
			index = 0;
			executeCommand(command);
 224:	ce 01       	movw	r24, r28
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	0e 94 d7 00 	call	0x1ae	; 0x1ae <executeCommand>
 22c:	dd cf       	rjmp	.-70     	; 0x1e8 <main+0x2a>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
